//
// The API doc styling is almost entirely based upon the openff-sphinx-theme
// https://github.com/openforcefield/openff-sphinx-theme@ put together by Josh
// Mitchell (commit bdf4273).
//

$green:        hsl(122, 39.44%, 49.22%) !default;
//$green-light:  hsl(122, 38.46%, 56.67%) !default;
$green-dark:   hsl(122, 43.43%, 38.82%) !default;

$grey-dark:    hsl(0, 0.00%, 38.04%) !default
//$grey-light:   hsl(0, 0.00%, 61.96%) !default
$grey:         hsl(0, 0.00%, 45.88%) !default

$light-blue-dark: hsl(206, 98.72%, 30.59%) !default

$api-name-color: $light-blue-dark;
$api-property-color: $green-dark;
$api-path-color: $grey;
$api-param-symbol-color: $light-blue-dark;
$api-param-name-color: $light-blue-dark;
$api-param-value-color: $grey-dark;
$api-type-color: $grey-dark;
$api-source-link-color: $light-blue-dark;

$link-hover: $green;

$api-header-font-size: 1.1rem;
$api-arguments-indent: 2 * $api-header-font-size;

// Disable the background of in-line code.
dl.api-field > dd > p code {
	background-color: transparent;
}
.md-typeset dl.api-field>dt {
	background-color: transparent;
}

dl:not(.docutils):not(.field-list):not(.simple):not(.citation):not(.option-list):not(.footnote)[class] {
    // Header and signature
    > dt {

        // Indent the argument list
        padding-left: $api-arguments-indent;
        > :first-child {
            margin-left: -$api-arguments-indent;
        }

        // Text specifying class, function, method, pydantic model, etc. Not always present, eg for plain functions
        > .property .pre {
            color: $api-property-color;
            font-size: inherit;
        }
        // Text providing path to the object
        > .sig-prename {
            padding: 0;
            background-color: transparent;
            font-weight: 200;
            font-size: inherit;
            color: $api-path-color;
        }
        // Text providing the name of the object
        > .sig-name {
            padding: 0;
            background-color: transparent;
            color: $api-name-color;
            font-weight: 600;
            font-size: inherit;
            // autodoc_pydantic produces types as properties _after_ the sig name
            ~ .property .pre {
                color: $api-type-color;
                font-style: normal;
            }

            // If the source link immediately follows the name, don't position it absolutely
            + a.reference.internal .viewcode-link {
                position: static !important;
                float: right;
                margin-left: 0.5em;
            }
        }
        // Opening and closing parenthesis
        > .sig-paren {
            font-size: inherit;

        }
        // Each parameter
        > .sig-param {
            font-size: inherit;
            font-style: normal;
            // Entire parameter if parsing the parameter has failed. Splits on commas
            > .pre {
                color: $api-param-name-color;
            }
            // Name of a parameter
            > .n > .pre {
                color: $api-param-name-color;
            }
            // Symbols; equals sign, asterisk, etc
            > .o > .pre {
                color: $api-param-symbol-color;
                padding-left: 0.2em;
                padding-right: 0.2em;
            }
            // Type anotation
            .p, .p + .n {
                .pre {
                    color: $api-type-color;
                    font-style: italic;
                }
            }
            // Default values of arguments
            > .default_value > .kc {
                color: $api-param-value-color;
            }
            // After each parameter, newline
            &::before {
                content: "\a";
                white-space: pre;
            }
            // Links
            a {
                font-weight: 550;
                &:hover {
                    .pre, pre, code {
                        color: $link-hover !important;
                    }
                }
            }
            code {
                background: inherit;
            }
        }
        // Brackets [] denoting optional arguments
        // This is redundant information and I am displeased to have to support it
        > .optional {
            // Put optional [] brackets on their own lines
            &::before {
                content: "\a";
                white-space: pre;
            }
            // Optional parameters need extra indentation
            ~ .sig-param::before {
                content: "\a    ";
            }
        }
        // Closing parenthesis
        .sig-param, .optional {
            + .sig-paren {
                &::before {
                    content: "\a";
                    white-space: pre;
                }

                // Unindent closing paren, and everything following (except source link)
                position: relative;
                left: -$api-arguments-indent;
                ~*:not(a.reference.internal, .headerlink) {
                    position: relative;
                    left: -$api-arguments-indent;
                    max-width: calc(100% + #{$api-arguments-indent} - 4em);
                    display: inline-block;
                    vertical-align: top;
                }
                ~ .headerlink {
                    position: absolute;
                }
            }
        }
    }
}